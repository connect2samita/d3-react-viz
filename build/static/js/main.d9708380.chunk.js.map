{"version":3,"sources":["BarChart/BarChart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["barChart","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dataset","data","colors","d3","barHorizontal","append","attr","length","selectAll","enter","d","i","barHeight","style","text","split","forEach","e","parseInt","horizontalChart","react_default","a","createElement","className","React","Component","App","src","logo","alt","BarChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RAqEeA,cAjEX,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACVH,iFAKMO,GACZ,IAAIC,EAAOD,EAMPE,EAASC,IAAgBA,KAQzBC,EANYD,IAAU,cAEJE,OAAO,OACxBC,KAAK,QAVE,KAWPA,KAAK,SARM,GAQgBL,EAAKM,QAEXC,UAAU,KAC/BP,KAAKA,GACLQ,QACAJ,OAAO,KACPC,KAAK,YAAa,SAASI,EAAGC,GAC3B,MAAO,eAfC,GAeiBA,EAAiB,MAGlDP,EAAcC,OAAO,QAChBC,KAAK,QAAS,SAASI,GACpB,OArBU,GAqBFA,IAEXJ,KAAK,SAAUM,IACfN,KAAK,OAAQ,SAASI,EAAGC,GACtB,OAAOT,EAAOQ,KAGtBN,EAAcC,OAAO,QAChBC,KAAK,IAAK,SAASI,GAChB,OA9BU,GA8BFA,EAAmB,IAE9BJ,KAAK,IAAK,IACVA,KAAK,KAAM,SACXO,MAAM,YAAa,QACnBA,MAAM,QAAS,QACfC,KAAK,SAASJ,GAAK,OAAOA,gDAI/B,IAAIV,EAAUJ,KAAKH,MAAMO,QAAQe,MAAM,KACvCf,EAAQgB,QAAQ,SAACC,EAAEN,GACfX,EAAQW,GAAKO,SAASD,KAG1BrB,KAAKuB,gBAAgBnB,oCAIrB,OACIoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBA7DJC,IAAMC,WCcdC,mLAVX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAML,UAAU,WAAWM,IAAI,SACzCT,EAAAC,EAAAC,cAACQ,EAAD,CAAU9B,QAAQ,eAClBoB,EAAAC,EAAAC,cAACQ,EAAD,CAAU9B,QAAQ,8BANRyB,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.d9708380.chunk.js","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\n\nclass barChart extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // this.horizontalBarChart = this.horizontalBarChart.bind(this);\n    }\n\n    horizontalChart(dataset) {\n        var data = dataset;\n        var width = 300;\n        var height = 300;\n        var scaleFactor = 20;\n        var barHeight = 30;\n\n        var colors = d3.scaleOrdinal(d3.schemeAccent);\n\n        var container = d3.select('.bar-chart');\n\n        var graph = container.append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", barHeight * data.length);\n\n        var barHorizontal = graph.selectAll('g')\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", function(d, i) {\n                return \"translate(0,\" + (i * barHeight) + \")\";\n            });\n\n        barHorizontal.append(\"rect\")\n            .attr(\"width\", function(d) {\n                return (d * scaleFactor);\n            })\n            .attr(\"height\", barHeight - 10)\n            .attr(\"fill\", function(d, i) {\n                return colors(d);\n            });\n\n        barHorizontal.append(\"text\")\n            .attr(\"x\", function(d) {\n                return (d * scaleFactor) + 5;\n            })\n            .attr(\"y\", (barHeight - 10) / 2)\n            .attr(\"dy\", \".35em\")\n            .style(\"font-size\", \"12px\")\n            .style(\"color\", \"#FFF\")\n            .text(function(d) { return d; });\n    }\n\n    componentDidMount() {\n        let dataset = this.props.dataset.split(\",\");\n        dataset.forEach((e,i) => {\n            dataset[i] = parseInt(e);\n        });\n\n        this.horizontalChart(dataset);\n    }\n\n    render() {\n        return (\n            <div className=\"bar-chart\"></div>\n        );\n    }\n}\n\nexport default barChart;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BarChart from './BarChart/BarChart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <BarChart dataset=\"4,6,3,10,7\" />\n        <BarChart dataset=\"10, 8, 3, 6, 2, 5\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}